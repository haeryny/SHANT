{
  
    
        "post0": {
            "title": "P4 4/28 Lists Overview",
            "content": "Overview . Teach about lists and dictionaries. . Subtopics on the lesson . Data Structures including List, Dictionaries, 2D arrays and Iteration (Big Idea 3). Teach these concepts by visualization. . Building Simulation/Interaction using Lists and Iteration | Storing List and Dictionary content in Databases | . Lesson Plans . Doing two lessons on what lists and dictionaries are and how to use them in databases. . Talk about vocabulary used throughout the lesson, Code segments to run and debug | Create lists and dictionaries | Show simulations | . Plans for Hacks . Create a list and a dictionary and compare the two. | . Grading . 0.2 for notes on the lesson | 0.3 for the creation of the list | 0.3 for the creation of the dictionary | 0.1 for the comparison | Extra 0.1 for creating a dictionary/list, iterating through it with a use inputed value, and giving an output which is dependent on the input (similar to the playlist maker) | .",
            "url": "https://haeryny.github.io/SHANT/student/2023/04/28/Lists-Lesson-Plan.html",
            "relUrl": "/student/2023/04/28/Lists-Lesson-Plan.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Dictionaries",
            "content": "Ordered Dictionaries . Iterates over keys and values in the same order that the keys were inserted | If an entry is deleted and reinserted, then it will be moved to the end of the dictionary | Specially designed to keep its items ordered | Useful in situations where the order of insertion is important and when you need to process data in a specific order | If the order of the data is important, an ordered dictionary is the better choice | . How to create an ordered dictionary? . Import OrderedDict from collections | Create an empty ordered dictionary by instantiating OrderedDict without providing arguments to the constructor | Add key-value pairs to the dictionary by providing a key in square brackets ([]) and assigning a value to that key. | Print the ordered dictionary | Iterate over the items in the ordered dictionary | Regular Dictionaries . Mutable; can add, remove, and modify key-value pairs after they have been created | Used to store data values in key:value pairs | Can be iterated over using loops | If order is not important, a regular dictionary may provide better performance | . How to create a regular dictionary? . Create a variable name which will be the name of the dictionary | Assign the variable to an empty set of curly braces {} | Create a dictionary with the dict() OR empty curly brackets | Hacks . Make a venn diagram about ordered dictionaries and regular dictionaries .",
            "url": "https://haeryny.github.io/SHANT/2023/04/02/Dictionaries.html",
            "relUrl": "/2023/04/02/Dictionaries.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "import sqlite3 from sqlite3 import Error def create_connection(db_file): conn = None try: conn = sqlite3.connect(db_file) return conn except Error as e: print(e) return conn def create_table(conn, create_table_sql): try: c = conn.cursor() c.execute(create_table_sql) except Error as e: print(e) def main(): database = &#39;instance/songs.db&#39; sql_create_songs_table = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS songs ( genre text NOT NULL, artist_name text NOT NULL, track_name text NOT NULL, duration_ms integer NOT NULL, tempo integer NOT NULL ); &quot;&quot;&quot; conn = create_connection(database) # create table if conn is not None: # create books table create_table(conn, sql_create_songs_table) else: print(&quot;Error! cannot create the database connection.&quot;) if __name__ == &#39;__main__&#39;: main() . # Populate import sqlite3 as sq import pandas as pd connection = sq.connect(&#39;instance/songs.db&#39;) # Create a cursor object curs = connection.cursor() student = pd.read_csv(&#39;files/songs.csv&#39;) # Write the data to a sqlite db table student.to_sql(&#39;songs&#39;, connection, if_exists=&#39;replace&#39;, index=False) # Run select sql query curs.execute(&#39;select * from songs&#39;) # Fetch all records # as list of tuples records = curs.fetchall() # Close connection to SQLite database connection.close() . import sqlite3 conn = sqlite3.connect(&#39;instance/songs.db&#39;) cursor = conn.cursor() cursor.execute(&quot;ALTER TABLE songs DROP COLUMN popularity&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN acousticness&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN danceability&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN energy&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN instrumentalness&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN key&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN liveness&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN loudness&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN mode&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN speechiness&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN time_signature&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN valence&quot;) conn.commit() cursor.close() conn.close() . import sqlite3 def selectby_genre(genre): conn = sqlite3.connect(&#39;instance/songs.db&#39;) cursor = conn.cursor() results = cursor.execute(&quot;SELECT track_name FROM songs WHERE genre = ?&quot;, (genre,)) print(results) cursor.close() conn.close() # def selectby_artist(): # def selectby_artist(): x = &#39;Movie&#39; selectby_genre(x) . &lt;sqlite3.Cursor object at 0x7f29e05ffce0&gt; . def select_by_genre(): import sqlite3 conn = sqlite3.connect(&#39;instance/songs.db&#39;) c = conn.cursor() user_input = input(&quot;Enter genre:&quot;) # replace with actual user input c.execute(&quot;SELECT track_name, artist_name, genre FROM songs WHERE genre = ? ORDER BY RANDOM() LIMIT 5;&quot;, (user_input,)) results = c.fetchall() for row in results: print(row) conn.close() print(&quot;&quot;) def select_by_artist(): import sqlite3 conn = sqlite3.connect(&#39;instance/songs.db&#39;) c = conn.cursor() user_input = input(&quot;Enter artist name:&quot;) # replace with actual user input c.execute(&quot;SELECT track_name, artist_name, genre FROM songs WHERE artist_name = ? ORDER BY RANDOM() LIMIT 5;&quot;, (user_input,)) results = c.fetchall() for row in results: print(row) conn.close() print(&quot;&quot;) select_by_genre() select_by_artist() . .",
            "url": "https://haeryny.github.io/SHANT/2023/03/27/Clean-Songs-Data.html",
            "relUrl": "/2023/03/27/Clean-Songs-Data.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "SHANT Blog",
            "content": "SHANT . Members: . Scrum Master - Tanisha . Product Manager - Sophia . Technical/DevOps Lead - Haeryn . Frontend Developer - Amitha . Topic Expert - Naja .",
            "url": "https://haeryny.github.io/SHANT/2023/03/21/SHANT-blog.html",
            "relUrl": "/2023/03/21/SHANT-blog.html",
            "date": " • Mar 21, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This group is called SHANT. . Scrum Master - Tanisha Product Manager - Sophia Technical/DevOps Lead - Haeryn Frontend Developer - Amitha Topic Expert - Naja .",
          "url": "https://haeryny.github.io/SHANT/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Music Profile",
          "content": "&lt;!DOCTYPE html&gt; . Document . My Profile . . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.__&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.__&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__&nbsp;&nbsp;._. &nbsp;&nbsp;_____&nbsp;&nbsp;__&nbsp;__&nbsp;&nbsp;_____|__|&nbsp;____&nbsp;&nbsp;&nbsp;|__|&nbsp;______&nbsp;&nbsp;&nbsp;&nbsp;___________&nbsp;&nbsp;&nbsp;____&nbsp;_____&nbsp;_/&nbsp;&nbsp;|_|&nbsp;| &nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;|&nbsp;&nbsp; /&nbsp;&nbsp;___/&nbsp;&nbsp;|/&nbsp;___ &nbsp;&nbsp;|&nbsp;&nbsp;|/&nbsp;&nbsp;___/&nbsp;&nbsp;&nbsp;/&nbsp;___ _&nbsp;&nbsp;__&nbsp; _/&nbsp;__&nbsp; __&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;__ &nbsp;| |&nbsp;&nbsp;Y&nbsp;Y&nbsp;&nbsp; &nbsp;&nbsp;|&nbsp;&nbsp;/ ___&nbsp; |&nbsp;&nbsp; &nbsp;&nbsp; ___&nbsp;&nbsp;|&nbsp;&nbsp;| ___&nbsp; &nbsp;&nbsp;&nbsp;/&nbsp;/_/&nbsp;&nbsp;&gt;&nbsp;&nbsp;|&nbsp; / &nbsp;&nbsp;___/&nbsp;/&nbsp;__&nbsp; |&nbsp;&nbsp;|&nbsp;&nbsp; | |__|_|&nbsp;&nbsp;/____//____&nbsp;&nbsp;&gt;__| ___&nbsp;&nbsp;&gt;&nbsp;|__/____&nbsp;&nbsp;&gt;&nbsp;&nbsp; ___&nbsp;&nbsp;/|__|&nbsp;&nbsp;&nbsp;&nbsp; ___&nbsp;&nbsp;&gt;____&nbsp;&nbsp;/__|&nbsp;&nbsp;__ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;/_____/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; / My Favorite Songs . Add a favorite song here! . RankSort ⬆️⬇️ SongSort ⬆️⬇️ ArtistSort ⬆️⬇️ Lyrics Release DateSort ⬆️⬇️ Album Cover Artist Image Delete . ___| _______|________|_______________________O__________@____________ ___|/_______|________|_|___|__________|__@__|_____@__|_|____O._______|| __/|____4___|__O_____|_|___|__O.______|_|@__|____|___|_|___|O.______o|| _(_/^ __4__@|_|_____@__|___|_|________|_|@__|____|___|_|___|________o|| __ |/&#39;_____@__|________|__@|_|________|_|________|___|_____|_________||&nbsp;&nbsp;&nbsp;d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| Recommended Songs . Based on your favorite of... We think you&#39;d like... . .",
          "url": "https://haeryny.github.io/SHANT/music-profile/",
          "relUrl": "/music-profile/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Artist Profile",
          "content": ". Looking for new people to listen to? Need better music taste? Go here! . Artist Genre Searcher . Artist Genre Finder . Enter the desired genre: Find Artists . Anitta Learn More Genre: R&amp;B/Soul ADD TO FAVORITES Omar Apollo Learn More Genre: Alt/Indie ADD TO FAVORITES DOMi &amp; JD BECK Learn More Genre: Jazz ADD TO FAVORITES Muni Long Learn More Genre: R&amp;B/Soul ADD TO FAVORITES Samara Joy Learn More Genre: Jazz ADD TO FAVORITES Latto Learn More Genre: Hip-Hop/Rap ADD TO FAVORITES Måneskin Learn More Genre: Pop Rock ADD TO FAVORITES Tobe Nwigwe Learn More Genre: Hip-Hop/Rap ADD TO FAVORITES Molly Tuttle Learn More Genre: Folk ADD TO FAVORITES Wet Leg Learn More Genre: Alt/Indie ADD TO FAVORITES Mabu Learn More Genre: Hip-Hop/Rap ADD TO FAVORITES Alaina Castillo Learn More Genre: Folk ADD TO FAVORITES Dean Learn More Genre: R&amp;B/Soul ADD TO FAVORITES Sean Yeung Learn More Genre: Pop ADD TO FAVORITES Amber Mark Learn More Genre: R&amp;B/Soul ADD TO FAVORITES Favorites . .",
          "url": "https://haeryny.github.io/SHANT/artist-profile/",
          "relUrl": "/artist-profile/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Artist Search",
          "content": "&lt;!DOCTYPE html&gt; . Artist Search . Search Artist Name Likes Dislikes . .",
          "url": "https://haeryny.github.io/SHANT/artist-search",
          "relUrl": "/artist-search",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Seach & Sort",
          "content": "⋆⁺₊⋆Search &amp; Sort Tracks!⋆⁺₊⋆ . . Enter Track: Submit Sort Alphabetically .",
          "url": "https://haeryny.github.io/SHANT/Sort%20Songs/",
          "relUrl": "/Sort Songs/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Discover Albums",
          "content": "&lt;!DOCTYPE html&gt; . Disover Albums! Made By Tanisha Patil . . &#63; ♫⋆｡♪ 𝔻𝕚𝕤𝕔𝕠𝕧𝕖𝕣 𝔸𝕝𝕓𝕦𝕞𝕤 ₊˚♬ ﾟ. . Artist Name: Search Sort Alphabetically .",
          "url": "https://haeryny.github.io/SHANT/discover-album/",
          "relUrl": "/discover-album/",
          "date": ""
      }
      
  

  

  
      ,"page8": {
          "title": "SHANT Music Website",
          "content": ". Login Here &times; Username Password Email Login Remember me Cancel Forgot password? .",
          "url": "https://haeryny.github.io/SHANT/_pages/home.html",
          "relUrl": "/_pages/home.html",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "",
          "content": ". Music Profile Artist Profile Artist Search Search &amp; Sort Discover Albums .",
          "url": "https://haeryny.github.io/SHANT/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://haeryny.github.io/SHANT/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}