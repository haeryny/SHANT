{
  
    
        "post0": {
            "title": "Storing List and Dictionary content in Databases",
            "content": "",
            "url": "https://haeryny.github.io/SHANT/2023/03/27/Lists_and_Dictionaries.html",
            "relUrl": "/2023/03/27/Lists_and_Dictionaries.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "import sqlite3 from sqlite3 import Error def create_connection(db_file): conn = None try: conn = sqlite3.connect(db_file) return conn except Error as e: print(e) return conn def create_table(conn, create_table_sql): try: c = conn.cursor() c.execute(create_table_sql) except Error as e: print(e) def main(): database = &#39;instance/songs.db&#39; sql_create_songs_table = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS songs ( genre text NOT NULL, artist_name text NOT NULL, track_name text NOT NULL, duration_ms integer NOT NULL, tempo integer NOT NULL ); &quot;&quot;&quot; conn = create_connection(database) # create table if conn is not None: # create books table create_table(conn, sql_create_songs_table) else: print(&quot;Error! cannot create the database connection.&quot;) if __name__ == &#39;__main__&#39;: main() . # Populate import sqlite3 as sq import pandas as pd connection = sq.connect(&#39;instance/songs.db&#39;) # Create a cursor object curs = connection.cursor() student = pd.read_csv(&#39;files/songs.csv&#39;) # Write the data to a sqlite db table student.to_sql(&#39;songs&#39;, connection, if_exists=&#39;replace&#39;, index=False) # Run select sql query curs.execute(&#39;select * from songs&#39;) # Fetch all records # as list of tuples records = curs.fetchall() # Close connection to SQLite database connection.close() . import sqlite3 conn = sqlite3.connect(&#39;instance/songs.db&#39;) cursor = conn.cursor() cursor.execute(&quot;ALTER TABLE songs DROP COLUMN popularity&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN acousticness&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN danceability&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN energy&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN instrumentalness&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN key&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN liveness&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN loudness&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN mode&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN speechiness&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN time_signature&quot;) cursor.execute(&quot;ALTER TABLE songs DROP COLUMN valence&quot;) conn.commit() cursor.close() conn.close() . import sqlite3 def selectby_genre(genre): conn = sqlite3.connect(&#39;instance/songs.db&#39;) cursor = conn.cursor() results = cursor.execute(&quot;SELECT track_name FROM songs WHERE genre = ?&quot;, (genre,)) print(results) cursor.close() conn.close() # def selectby_artist(): # def selectby_artist(): x = &#39;Movie&#39; selectby_genre(x) . &lt;sqlite3.Cursor object at 0x7f29e05ffce0&gt; . def select_by_genre(): import sqlite3 conn = sqlite3.connect(&#39;instance/songs.db&#39;) c = conn.cursor() user_input = input(&quot;Enter genre:&quot;) # replace with actual user input c.execute(&quot;SELECT track_name, artist_name, genre FROM songs WHERE genre = ? ORDER BY RANDOM() LIMIT 5;&quot;, (user_input,)) results = c.fetchall() for row in results: print(row) conn.close() print(&quot;&quot;) def select_by_artist(): import sqlite3 conn = sqlite3.connect(&#39;instance/songs.db&#39;) c = conn.cursor() user_input = input(&quot;Enter artist name:&quot;) # replace with actual user input c.execute(&quot;SELECT track_name, artist_name, genre FROM songs WHERE artist_name = ? ORDER BY RANDOM() LIMIT 5;&quot;, (user_input,)) results = c.fetchall() for row in results: print(row) conn.close() print(&quot;&quot;) select_by_genre() select_by_artist() . (&#39;Fuck Russ&#39;, &#39;T-Wayne&#39;, &#39;Rap&#39;) (&#39;untitled 03 | 05.28.2013.&#39;, &#39;Kendrick Lamar&#39;, &#39;Rap&#39;) (&#34;Can&#39;t Fuck with Us&#34;, &#39;Upchurch&#39;, &#39;Rap&#39;) (&#39;Otherside&#39;, &#39;Post Malone&#39;, &#39;Rap&#39;) (&#39;Wya?&#39;, &#39;Wifisfuneral&#39;, &#39;Rap&#39;) (&#39;Breathe&#39;, &#39;Taylor Swift&#39;, &#39;Pop&#39;) (&#39;Out Of The Woods&#39;, &#39;Taylor Swift&#39;, &#39;Pop&#39;) (&#39;Delicate - Recorded at The Tracking Room Nashville&#39;, &#39;Taylor Swift&#39;, &#39;Dance&#39;) (&#39;Blank Space&#39;, &#39;Taylor Swift&#39;, &#39;Dance&#39;) (&#39;You Belong With Me&#39;, &#39;Taylor Swift&#39;, &#39;Pop&#39;) .",
            "url": "https://haeryny.github.io/SHANT/2023/03/27/Clean-Songs-Data.html",
            "relUrl": "/2023/03/27/Clean-Songs-Data.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Building Simulation/Interaction using Lists and Iteration",
            "content": "Vocabulary . Iteration - Repitition of a Process | For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated | While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met | Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. | Condition - Allows the computer to know whether or not to keep repeating the loop. | increment/decrement - Modifies the counter variable after each repetition. | Indexing / List Index - The position of an element in a list, starting from 0 | append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. | Elements [in a list] - An item in a list. | Nesting - Having one data type or function inside another data type or function, such as lists or loops. | array - Another name for a list, depends on the language | . Building a simulation or interaction using lists and iteration in VS Code can be accomplished using a few simple steps: . Define your data: First, you need to define the data that your simulation will be working with. This could be a list of numbers, a list of strings, or any other type of data that your simulation will be manipulating. . | Write your simulation code: Once you have defined your data, you can start writing the code for your simulation. This code will typically involve iterating over your list of data, performing some operation on each item in the list, and updating the list accordingly. . | Test your simulation: After you have written your simulation code, it is important to test it to make sure it is working as expected. You can do this by running your code and checking the output to see if it matches what you expect. . | Refine your simulation: Once you have tested your simulation, you may need to refine it based on the results. This could involve tweaking the code to make it more efficient, adding new features, or fixing any bugs that you have discovered. . | Here&#39;s a simple example of a simulation in Python that uses lists and iteration to calculate the average of a list of numbers: . numbers = [1, 2, 3, 4, 5] # Initialize the sum and count variables sum = 0 count = 0 # Iterate over the list of numbers, adding each number to the sum for number in numbers: sum += number count += 1 # Calculate the average of the list of numbers average = sum / count # Print the average print(&quot;The average of the list is:&quot;, average) . This code defines a list of numbers, iterates over the list to calculate the sum and count of the numbers, and then calculates the average by dividing the sum by the count. Finally, it prints the average to the console. . Lists . For list operations, write expressions that use list indexing and list procedures. For algorithms involving elements of a list, write iteration statements to traverse a list. . List procedures are implemented in accordance with the syntax rules of the programming language. | Iteration statements can be used to traverse a list | Knowldege of exisiting algorithms that use iteration can help in constructing new algorithms. Some are: Determining a minimum or maximum value in a list | Computing a sum or average of a list of numbers | . | . What are Lists? . Lists are a collection of data in a sequence that is an iterable | Each sequence is demarcated with an index, starting from 0. This is known as base 0 indexing | In memory, it is stored as a variable name with multiple pointers to each variable stored in a certain order | Lists can also be called arrays | Lists have methods that act upon the list and change them. This moves the pointers within RAM to change the parts of the list. | . Nested Lists . Uses of Nested lists . Placing lists within lists allows you to have arrays of similar data together, and create complexity. . Some uses include: . Creating 2d Arrays | Storing similar, but slightly different categories (sublists) | Create a matrix | . Iteration . Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met. . In College Board&#39;s Pseudocode, the first is a REPEAT n TIMES loop, where the n represents some number. | . The second type of loop is a REPEAT UNTIL (condition) loop, where the loop will continue to run until a condition is met. . Conceptually, a while loop is very similar to an if conditional, except that a while is continually executed until it&#39;s no longer true and an if is only executed once. . Libaries . A software library contains procedures that may be used in creating new programs. | Existing code segments can come from internal or external sources, such as libaries or previously written code. | The use of libaries simplifies the task of creating complex programs. | . APIs . Application program interfaces (APIs) are specifications for how the procedures in a libary behave and can be used as documentation for an API/libary is necessary in understanding the behaviors provided by the API and how to use them. . A file that contains procedures that can be used in a program is considered a libary. . API provides specifications for how procedures in a library behave and can be used. | Many companies use APIs for programmers to interact with their products. | . Code Examples . Reverse a list utilizing features of lists and iteration . original_list = [1, 2, 3, 4, 5] print(&quot;List before reverse : &quot;,original_list) reversed_list = [] for value in original_list: reversed_list = [value] + reversed_list # print(&quot;List after reverse : &quot;, reversed_list) . List before reverse : [1, 2, 3, 4, 5] List after reverse : [5, 4, 3, 2, 1] . Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array. Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;array before sort {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the array value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) # print(f&quot;array after sort {list}&quot;) . array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] .",
            "url": "https://haeryny.github.io/SHANT/2023/03/24/Lists_and_Iteration.html",
            "relUrl": "/2023/03/24/Lists_and_Iteration.html",
            "date": " • Mar 24, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "SHANT Blog",
            "content": "SHANT . Members: . Scrum Master - Tanisha . Product Manager - Sophia . Technical/DevOps Lead - Haeryn . Frontend Developer - Amitha . Topic Expert - Naja . Topic: . Data Structures including List, Dictionaries, 2D arrays and Iteration (Big Idea 3). Teach these concepts by visualization. . Building Simulation/Interaction using Lists and Iteration | Building or improving on previous lessons and topics | Storing List and Dictionary content in Databases | .",
            "url": "https://haeryny.github.io/SHANT/2023/03/21/SHANT-blog.html",
            "relUrl": "/2023/03/21/SHANT-blog.html",
            "date": " • Mar 21, 2023"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": ". Unit 7: Trimester 3 Data Structures . Trimester 3 is taught following college course requirements for CS113 Data Structures. Topics, using Python, include searching, sorting, hashing, algorithms, analysis, object-oriented design, collections, lists, stacks, queues, trees, sets, dictionaries, and graphs. These weeks will also include the a focus on preparations for the May 2nd Create Performance Task and the May 8th Exam. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 25 | | | | | . 26 | | | | | . 27 | | | | | . 28 | | | | | . 29 | | | | | . 30 | | | | | . . Unit 1: Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 0 | | | | | . 1 | | | | | . 2 | | | | | . 3 | | | | | . . Unit 2: Introduction to Web Development . Websites are made up of several key parts: Frontend, Backend, Data and Deployment. The focus for these weeks is to enable students to perform the aspects of constructing and deploying a simple Website. Fastpages got us started on these concepts, but now we will start building a Website from the ground up. Once again, there will be a lot of learning focused tools and getting things working. But, by the end of the Unit, students will be ready to start many of the technical coding aspects of Web Development, having established a Deployed Website. On Nov 3rd our Trimester work will end with a project and student participation in Electives Department “Night at the Museum” (N@tM). . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 4 | | | | | . 5 | | | | | . 6 | | | | | . 7 | | | | | . . Unit 3: N@tM Project, Web, Systems, and Data . The beginning of Trimester 2 is focussed on Algorithms and Coding. Student need to build their own portfolio. That portfolio should focus on their interests in Python and JavaScript programming. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 8 | | | | | . 9 | | | | | . 10 | | | | | . 11 | | | | | . 12 | | | | | . . Unit 4: Algorithmic Programming . Trimester 2 begins with student teaching and a focus on algorithms. Each week a “Student Team” has a teaching assignment supported by College Board materials. Additionally, the Teacher is providing Career Tech mini-labs that correspond to one or more topics for the week. Use the two things together as you improve your learning experience, Frontend blog and Jupyter Notebooks. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 13 | | | | | . 14 | | | | | . 15 | | | | | . 16 | | | | | . . Unit 5: Intro to OOP, Databases, and Backend Programming . Trimester 2 continues with student learning OOP and immediately applying it to Databases. Each week a “Student Teams” will be working on frontend and backend elements for their Create Performance Task (CPT). GitHub pages will be focus of instruction for frontend, OOP in Python will be instruction provided to create a database which will help exceed every CPT requirement. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 17 | | | | | . 18 | | | | | . 19 | | | | | . 20 | | | | | . . Unit 6: Trimester 2 N@tM and finish CPT . Trimester 2 concludes with student presenting their CPT project at N@tM. Each person within “Student Teams” will have their own specialty within the student project that satisfied all their Create Performance Task requirements. Student should be able to talk about design, coding, and present features of their portion of the system. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 21 | | | | | . 22 | | | | | . 23 | | | | | . 24 | | | | | . . Unit 8: Trimester 3 AP Weeks . Trimester 3 contains AP weeks, where activities will be focused on supporting students in test preparations. Day before a test can be used to study for exam in another class. Days that are not focused on test preparation will be focused on planning for year end project/portfolio. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 31 | | | | | . 32 | | | | | . 33 | | | | | . . Unit 9: Trimester 3 Data Structures (continued) . Trimester 3 finishes with a focus on presenting accomplishments for the year at the year end Night at the Museum. These last 2 to 3 weeks will serve as the year end final exam. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 34 | | | | | . 35 | | | | | . 36 | | | | | .",
          "url": "https://haeryny.github.io/SHANT/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About",
          "content": "This group is called SHANT. . Scrum Master - Tanisha Product Manager - Sophia Technical/DevOps Lead - Haeryn Frontend Developer - Amitha Topic Expert - Naja .",
          "url": "https://haeryny.github.io/SHANT/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "",
          "content": "Blogs .",
          "url": "https://haeryny.github.io/SHANT/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://haeryny.github.io/SHANT/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}